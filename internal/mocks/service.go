// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -source=server.go -destination=../mocks/service.go -package=mocks Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/aibekfatkhulla/shop/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddProductToCategory mocks base method.
func (m *MockService) AddProductToCategory(ctx context.Context, categoryID, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductToCategory", ctx, categoryID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductToCategory indicates an expected call of AddProductToCategory.
func (mr *MockServiceMockRecorder) AddProductToCategory(ctx, categoryID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductToCategory", reflect.TypeOf((*MockService)(nil).AddProductToCategory), ctx, categoryID, productID)
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), ctx, order)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, user)
}

// DeleteSupplierByID mocks base method.
func (m *MockService) DeleteSupplierByID(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSupplierByID", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSupplierByID indicates an expected call of DeleteSupplierByID.
func (mr *MockServiceMockRecorder) DeleteSupplierByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSupplierByID", reflect.TypeOf((*MockService)(nil).DeleteSupplierByID), ctx, ID)
}

// GetOrderByID mocks base method.
func (m *MockService) GetOrderByID(ctx context.Context, ID string) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, ID)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockServiceMockRecorder) GetOrderByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockService)(nil).GetOrderByID), ctx, ID)
}

// GetProductByID mocks base method.
func (m *MockService) GetProductByID(ctx context.Context, ID string) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, ID)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockServiceMockRecorder) GetProductByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockService)(nil).GetProductByID), ctx, ID)
}

// GetSupplierByID mocks base method.
func (m *MockService) GetSupplierByID(ctx context.Context, ID string) (*domain.Supplier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupplierByID", ctx, ID)
	ret0, _ := ret[0].(*domain.Supplier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupplierByID indicates an expected call of GetSupplierByID.
func (mr *MockServiceMockRecorder) GetSupplierByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupplierByID", reflect.TypeOf((*MockService)(nil).GetSupplierByID), ctx, ID)
}

// ListProducts mocks base method.
func (m *MockService) ListProducts(ctx context.Context, limit, offset int) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockServiceMockRecorder) ListProducts(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockService)(nil).ListProducts), ctx, limit, offset)
}

// ListUsers mocks base method.
func (m *MockService) ListUsers(ctx context.Context) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockServiceMockRecorder) ListUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockService)(nil).ListUsers), ctx)
}

// RemoveProductFromCategory mocks base method.
func (m *MockService) RemoveProductFromCategory(ctx context.Context, categoryID, productID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProductFromCategory", ctx, categoryID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProductFromCategory indicates an expected call of RemoveProductFromCategory.
func (mr *MockServiceMockRecorder) RemoveProductFromCategory(ctx, categoryID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProductFromCategory", reflect.TypeOf((*MockService)(nil).RemoveProductFromCategory), ctx, categoryID, productID)
}

// UpdateOrder mocks base method.
func (m *MockService) UpdateOrder(ctx context.Context, order *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockServiceMockRecorder) UpdateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockService)(nil).UpdateOrder), ctx, order)
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), ctx, user)
}
